
{
    #1-1、print输出函数
    {
        print(520)#可以打印输出数字

        print("hello world")#可以打印输出字符串（加引号）

        print(1+3)#可以打印输出含有运算符的表达式，输出表达式结果

        #将数据输出到文件当中
        #{注意点：指定路径存在，使用file = fp}
        fp = open('D:/text.txt','a+')#a+表示如果文件不存在则创建文件，存在则在文件后面追加
        print('hello world', file = tf)
        fp.close

        #不换行进行输出
        print('hello','world','Python')#使用逗号非公开就会在一行显示
    }
    #1-2、转义字符
     {   
        print('hello\nworld')#分行输出 #\ +转义功能的首字母
        print('hello\tworld')#水平指表
        print('hello\rworld')#回车会覆盖前面
        print('hello\bworld')#回退一个，覆盖o
        print('老师说：\'大家好\'')#\'输出'
        #原字符，不希望字符串里面的转义字符起作用，就是用原字符，就是在字符串前面加上一个r
        #{注意：字符串最后一位不能够是\,会报错}
        print(r'hello\tworld')
        }
}
----------------------------------------------------------------------
{
    #2-1、数据类型
    {
        #整数类型 int 
        '''{二进制：0b
            八进制：0o
            十进制:
            十六进制：0x}'''
        #浮点型数据 float
        '''
        浮点数据组成：整数部分和小数部分
        浮点数据存储不精准性，需要导入decimal模块
        for decimal import Decimal
        print(Decimal('1.1')+Decimal('2.2'))输出答案为3.3
        '''
        #布尔类型 bool（true/false）
        '''
        print(ture+1)输出为2
        print(false+1)输出为1
        '''
        #字符串类型 str 文字字母数字
        }
    #2-2、标识符和保留字
    {
        #标识符：变量、函数、模块和其他对象的起的名字
        #规则：字母、数字、下划线，不能够以数字开头，不能够是我的保留字，严格区分大小写
        }
    #2-3、变量的定义使用
    {
        name ='玛利亚'
        print(name)
        print('标识',id(name))
        print('类型',type(name))

        #多次赋值，后一次会覆盖前一个赋值
        }
     #2-4、二进制与字符编码与注释    
    {
        #八位为一个字节8 bit = 1 byte
        #注释类型：单行注释#，多行注释三引号，中文编码的注释# coding:编码格式
        }
        {
        #数据类型的转换（能够将不同的数据拼接在一起）
        #str()将其他数据类型转化为字符串{str(123)或者'123'}
        #int()将其他数据类型转化为整数{int('123')或者int(9.8)}
            #{注意：文字与小数类字符串无法转化，浮点型数据转化整数就是抹零取整}
        #float()将其他数据类型转化为浮点型数据{float('9.9')或者float(9)}
            #{注意：文字字符串类无法转化，整数转化浮点数，在末尾补.0}
        
        
        }
    }
----------------------------------------------------------------------
#3、input()函数与运算符
{
    #3-1、输出函数input（）
    {
        #input函数作用：接受来自用户的输入（数据类型为str）
        present = input('你好吗？')#把'你好吗？'结果字符串赋值给present
        '''
        #例题:从键盘输入两个数，并求和
        a = input('请输入一个数：')
        b = input('请输入一个数：')
        print(a+b)#输入10与20输出结果为1020，因为输入的数据类型为str，所以+是做连接
        
        a = int(input('请输入一个数：'))#将其他数据类型转化为整数
        b = int(input('请输入一个数：'))
        print(a+b)#输入10与20输出结果为30
        '''
    }
    #3-2、运算符（优先级：算术运算符>位运算>比较运算>bool运算>赋值运算）
    {
        #标准算数运算符
        {
            print(1+1)
            print(1*1)
            print(1-1)
            print(1/1)#除法运算
            print(1//1)#整除运算（一正一负向下取整）
            print(1%1)#取余运算（一正一负，公式：余数=除数-被除数*商，例如print(-9%4)结果为3）
            print(2**2)#幂运算        
        }
        #赋值运算符（执行顺序右到左）
        {
            a,b,c=1,2,3
            a=b=c=10#链式赋值
            a = 20
            a += 30#参数赋值，a = 50
            a,b=10,20
            print(a,b)#输出为ab分别为10与20
            a,b=b,a#交换
            print(a,b)#输出为ab分别为20与10
        }
        
        #比较运算符
        {
            比较运算符的输出类型为bool类型
            比较两个数据值是否相同用==
            比较两个数据标识符是否相同用is（is not）
        }
        
        #bool运算符
        {
            and运算：有一个false就为false
            or运算：有一个true就为true
            not运算：取反
            in运算：是否存在（s='asdfg' print('a' in s) 存在为true）
        }
        
        #位运算符（将数据转化为二进制）
        {
            按位与&：对应数都是1，结果才是1
            按位或|：对应数都是0，结果才是0
            左移位运算符<<:高位溢出舍弃，低位补0（变大，相当于扩大了两倍）
            右移位运算符>>:低位溢出舍弃，高位补0（变小，相当于缩小了两倍）
        }
        
    }
}

#4、程序的流程控制
{
    #4-1、程序的组织结构（pass语句，不执行，只是一个占位符）
    {
        #顺序结构
        {
            #程序从上到下执行代码，直到程序结束才停止。 
         }
        #单分支结构
        {
            #语法结构：
            if 条件表达式 ：
                条件执行体1
        }
          #双分支结构
        {
            #语法结构：
            if 条件表达式 ：
                条件执行体1
            else
                条件执行体2
        }
          #多分支结构
        {
            #语法结构：
            if 条件表达式1 ：
                条件执行体1
            elif 条件表达式2 ：
                条件执行体2
            ...
            else:
                条件执行体n+1
        }
        #嵌套if结构
        {
            if 条件表达式1 ：
                if 内层条件表达式1 ：
                    内层条件执行体1
                else:
                    内层条件执行体2
            else:
                条件执行体1
        }
        #条件表达式（简化if结构）
        {
            #语法结构： X if 条件表达式 else Y{if为true则为X，否则为Y}
            '''
            例题：
            从键盘输入两个数，并比较其大小
            a = int(input('请输入第一个数字'))
            b = int(input('请输入第二个数字'))
            <1、常规if>
            if a>=b :
                print(a,'大于等于',b)
            else
                print(a,'小于',b)
            输入10与20输出结果为10小于20
            <2、条件表达式>
            print(a,'大于等于',b if a>=b else a,'小于',b)
            输入10与20输出结果为10,小于,20
            print(str(a)+'大于等于'+str(b) if a>=b else str(a)+'小于'+str(b))
            入10与20输出结果为10小于20<采用字符串连接>
            
            '''
        }
        
    }
    
    #4-2、对象的bool值（bool()）
    {
        '''python一切皆对象，所有对象都有一个bool值'''
        #bool值为false的：False，数值0，None，空字符串，空列表，空元祖，空字典，空集合。
        #除上面以外，其他对象bool值为true。
     }
} 
